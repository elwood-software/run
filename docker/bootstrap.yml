# yaml-language-server: $schema=../schema/bootstrap.json

cleanup: before
env:
  passthrough:
    - OPENAI_API_KEY
  required:
    - OPENAI_API_KEY

reporters:
  - name: "file"
    options:
      path: "/elwood/runner/workspace/report-{id}.json"
  - name: "console"

workflow:
  name: "bootstrap"
  defaults:
    permissions: true
  jobs:
    hi:
      when: true
      steps:
        - action: echo
          input:
            content: "hi"

    # test:
    #   when: true
    #   steps:
    #     - action: fs/write
    #       input:
    #         dest: "stage:///test.txt"
    #         content: "poop"
    #     - name: read
    #       action: fs/read
    #       input:
    #         src: "stage:///test.txt"
    #         output: "test"
    #     - action: echo
    #       input:
    #         content: ${{ steps.read.outputs.test }}

    # full:
    #   when: false
    #   steps:
    #     - action: install/whisper
    #     - action: fs/copy
    #       input:
    #         src: "/tmp/fixtures/conan.mp3"
    #         dest: "stage://sample.mp3"
    #     - action: run
    #       input:
    #         bin: whisper
    #         args:
    #           - --verbose
    #           - "True"
    #           - --language
    #           - en
    #           - --output_dir
    #           - $ELWOOD_STAGE
    #           - $ELWOOD_STAGE/sample.mp3

    # write:
    #   when: false
    #   steps:
    #     - action: fs/copy
    #       input:
    #         src: "/tmp/fixtures/sample.srt"
    #         dest: "stage:///sample.srt"
    #     - name: read
    #       action: fs/read
    #       input:
    #         src: "stage:///sample.srt"
    #         output: "srt"
    #     - action: ai/openai
    #       input:
    #         api_key: ${{ env.OPENAI_API_KEY }}
    #         command: "createCompletions"
    #         model: "gpt-4o"
    #         prompt:
    #           - ${{ "Identify advertisement segments in the following SRT text text:" + steps.read.outputs.srt }}
